@model ProductVM

@{
    ViewBag.PageTitle = "Product Management";
    ViewBag.CardTitle = "Create Product";
   // Layout = "~/Views/Shared/_Dashboard.cshtml";
    //  after add these ( Layout = "_Dashboard";) in _ViewStart  , i will be not need to add these(Layout = "~/Views/Shared/_Dashboard.cshtml";) in all admin views


}
 

<div class="row">
    <div class="col-md-4">
        @*I should the enctype multi/form-data  to make the file can get files or data *@
        <form method="post" asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Product.Name"></label>
                <input asp-for="Product.Name" class="form-control"/>
                <span asp-validation-for="Product.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Product.Description"></label>
                <textarea asp-for="Product.Description" class="form-control" id="mytextarea"></textarea>
                
                <span asp-validation-for="Product.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Product.Price"></label>
                <input asp-for="Product.Price" class="form-control" />
                <span asp-validation-for="Product.Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Product.Img" class="control-label"></label>
                @*  in the create data wasn't saved in the DB so, to display it we should create it by JS. 
                    also when the user input the image, i should pass the function create implementation to 
                    display the image when i create  to the onchange event .
                *@ 
               @*  the first way  *@
               @*  <input asp-for="Product.Img" class="form-control" type="file" name="file" id="imgfile" onchange="fillimg(event);"/> *@
               @*  the second way  *@
                <input asp-for="Product.Img" class="form-control" type="file" name="file" id="imgfile" onchange="FillImage(event)" />
                
            </div>
            <div class="form-group">
                <label asp-for="Product.CategoryId" class="control-label"></label>

                <select asp-for="Product.CategoryId" asp-items="Model.CategoryList" class="form-control"> 
                    <option disabled selected>--Select Category--</option>
                </select>
                <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit"  value="Create" class="btn btn-primary" />
                <a asp-action="Index" asp-controller="Product" class="btn btn-warning">Back To Index</a>

            </div>
            

        </form>

    </div>
   @*  in the create data wasn't saved in the DB so, to display it we should create it by JS *@

    <div class="col-md-4">
        <div class="container">
            <img id="imagePreview"  alt="ProductImage" width="400" height="400" />
        </div>
    </div>
</div>

@**@
<!-- this to create the client side validation error -->
@section Scripts {
    @*
        this
    <partial name="_ValidationScriptsPartial"/>
    *@
    @*or this*@
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    @*  any textarea i want to use it with MCE i must add this in the html file that contains the textarea 
         and this <script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
        in this project i implement it in the _Dashboard to can use MCE with Any Textarea in the project 
        by add the following statement only in the html  *@
    @*  <script>
        tinymce.init({
          selector: '#mytextarea'
        });
    </script> *@ 
    @*  i replace it to following after add no-api-key=vvznev3872zsnqt6hovhh6301q0v42h5ltqvxpe6thbc39qx in url *@
    <!-- Place the first <script> tag in your HTML's <head> -->
    @* <script src="https://cdn.tiny.cloud/1/vvznev3872zsnqt6hovhh6301q0v42h5ltqvxpe6thbc39qx/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
 *@
    <!-- Place the following <script> and <textarea> tags your HTML's <body> -->
    <script>
        tinymce.init({
          selector: '#mytextarea',
          plugins: [
            // Core editing features
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
            // Your account includes a free trial of TinyMCE premium features
            // Try the most popular premium features until Jan 3, 2025:
            'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown','importword', 'exportword', 'exportpdf'
          ],
          toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
          tinycomments_mode: 'embedded',
          tinycomments_author: 'Author name',
          mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
          ],
          ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
        });

         // get image src for display when create
        // var fillimg = function (event){
        //     var imgHolder = document.getElementById("imagePreview");
        //     imgHolder.src = URL.createObjectURL(event.target.files[0]);
        // }
    </script>
    <script>
        // get image src for display when create  
        // var fillimg = function (event){
        //     var imgHolder = document.getElementById("imagePreview");
        //     imgHolder.src = URL.createObjectURL(event.target.files[0]);
        // }

        function FillImage(event){
            var imgHolder = document.getElementById("imagePreview");
            imgHolder.src = URL.createObjectURL(event.target.files[0]);
        }
    </script>



}
